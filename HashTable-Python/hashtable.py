# -*- coding: utf-8 -*-
"""Hashtable.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BILDCdff6KxZBMPAosPngxw3qSq4rMG8
"""

#by Chainrocker
#by Chainrocker
import operator
class Node:
	def __init__(self, key, value):
		self.key = key
		self.value = value
		self.next = None
    
	def __str__(self):
		return "%s %s" % (self.key, self.value)
  
	def __repr__(self):
		return str(self)
  
class HashTable:
  
    def __init__(self):
      self.capacity = 1000
      self.size = 0
      self.buckets = [None]*self.capacity

    def hash(self, key):
      hashsum = 0
      for idx, c in enumerate(key):
        hashsum += (idx + len(key)) ** ord(c)
        hashsum = hashsum % self.capacity
      return hashsum


    def insert(self, key, value):
      
      index = self.hash(key)
      node = self.buckets[index]
      
      if node is None:
        self.buckets[index] = Node(key, value)
        self.size += 1
        return    
      nodeNext = node
      while node is not None:
        if(node.key==key):
          node.value=value
          return
        nodeNext = node
        node = node.next
      nodeNext.next = Node(key, value)
      self.size += 1

    def search(self, key):
      index = self.hash(key)
      node = self.buckets[index]
      while node is not None and node.key != key:
        node = node.next
      if node is None:
        return None
      else:
        return node.value
    def showTable(self):
      for node in self.buckets:
        if node is not None:
          while node is not None:
            print(node)
            node=node.next
    
    def sortTable(self):
      tempTable=dict()
      for node in self.buckets:
        if node is not None:
          while node is not None:
            tempTable[node.key]=node.value
            node=node.next 
      for key in sorted(tempTable.keys()):
        print (key, tempTable[key])
        
      return sorted(tempTable.keys())   
          
    def remove(self, key):

      index = self.hash(key)
      node = self.buckets[index]
      nodeNext = None

      while node is not None and node.key != key:
        nodeNext = node
        node = node.next

      if node is None:

        return None
      else:

        self.size -= 1
        result = node.value

        if nodeNext is None:
          self.buckets[index] = node.next 
        else:
          nodeNext.next = nodeNext.next.next 

        return result
      
    
  
a=HashTable()
i=0
a.insert("b",2)
a.insert("g",2)
while(i<3):
  w=a.search("a")
  if(w!=None):
    a.insert("a",w+1)
  else:
    a.insert("a",1)
    
  i+=1
a.insert("b",2)
a.insert("c",1)
a.insert("h",1)
print(a.search("a"))
print(a.size)
a.showTable()
print("////////////////////")
a.sortTable()

